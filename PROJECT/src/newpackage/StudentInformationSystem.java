
package newpackage;


import javax.swing.*;

import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat; 
import java.sql.Statement;
import java.sql.*;
import java.util.Random;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;


public class StudentInformationSystem extends javax.swing.JFrame {
     public StudentInformationSystem() {
        initComponents();  // Auto-generated by the Form Editor

        // Example: Setting an icon for a label
        jLabel5.setIcon(new ImageIcon(new ImageIcon("C:/Users/joshu/Downloads/ISUFST2.png")
            .getImage()
            .getScaledInstance(jLabel5.getWidth(), jLabel5.getHeight(), Image.SCALE_SMOOTH)));
    }

    /**
     * Clears all input fields. Can be triggered by a button (e.g., "Remove").
     */
    private void clearFields() {
        // Example: Assuming these are the names of your input fields
        StudentName.setText("");  // Clears StudentName JTextField
        Address.setText("");      // Clears Address JTextField
        PhoneNum.setText("");     // Clears PhoneNum JTextField
        Age.setText("");          // Clears Age JTextField
        Bday.setText("");         // Clears Bday JTextField
        ID_no.setText("");        // Clears ID_no JTextField
        // Add additional fields if needed
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Address = new javax.swing.JTextField();
        PhoneNum = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        StudentName = new javax.swing.JTextField();
        btnEnroll = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ID_no = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Age = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Bday = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        update = new javax.swing.JButton();
        del = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        Gend = new javax.swing.JTextField();
        courseComboBox = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));
        setForeground(new java.awt.Color(102, 102, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(102, 204, 255));
        jLabel1.setFont(new java.awt.Font("Dubai Medium", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Registration:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(39, 144, -1, 32));
        getContentPane().add(Address, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 240, 105, -1));
        getContentPane().add(PhoneNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 286, 105, -1));

        jLabel2.setText("Name:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 200, -1, -1));

        jLabel3.setText("Address:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 246, -1, -1));

        jLabel4.setText("Phone number:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 292, -1, -1));
        getContentPane().add(StudentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 194, 105, -1));

        btnEnroll.setBackground(new java.awt.Color(102, 102, 255));
        btnEnroll.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        btnEnroll.setForeground(new java.awt.Color(255, 255, 255));
        btnEnroll.setText("SAVE");
        btnEnroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnrollActionPerformed(evt);
            }
        });
        getContentPane().add(btnEnroll, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 190, 120, 58));
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 563, 60));
        getContentPane().add(ID_no, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 512, 89, -1));

        jLabel6.setText("Your ID no:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 518, -1, -1));
        getContentPane().add(Age, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 332, 105, -1));

        jLabel7.setText("Age:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 338, -1, -1));
        getContentPane().add(Bday, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 378, 105, -1));

        jLabel8.setText("Birthday:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(184, 384, -1, -1));

        update.setBackground(new java.awt.Color(102, 102, 255));
        update.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        update.setText("UPDATE INFO");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        getContentPane().add(update, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 270, -1, 58));

        del.setBackground(new java.awt.Color(153, 0, 0));
        del.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        del.setText("REMOVE INFO");
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });
        getContentPane().add(del, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 350, -1, 58));

        jLabel9.setText("Gender:");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 200, -1, -1));
        getContentPane().add(Gend, new org.netbeans.lib.awtextra.AbsoluteConstraints(401, 194, 105, -1));

        courseComboBox.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        courseComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select:", "BSIT", "BSHM", "BSTM", "BSED", "BSMT", "BSCRIM" }));
        getContentPane().add(courseComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 424, -1, 40));

        jLabel10.setText("Select your desired course:");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 436, -1, -1));

        jLabel11.setText("eg. YYYY-MM-DD");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(353, 384, -1, -1));

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        getContentPane().add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(164, 512, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnrollActionPerformed
/// Inside the action listener for the Enroll/Create button
Connection conn = DBConnection.getConnection();
if (conn != null) {
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    try {
        // Validate inputs (like StudentName, Address, etc.)
        String nameInput = StudentName.getText().trim();
        if (!nameInput.matches("[a-zA-Z ]+")) {
            JOptionPane.showMessageDialog(null, "Student name must contain only alphabetic characters and spaces.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            StudentName.requestFocus();
            return; // Stop execution
        }

        String addressInput = Address.getText().trim();
        if (!addressInput.matches("[a-zA-Z,\\.\\-\\s]+")) {
            JOptionPane.showMessageDialog(null, "Address contains invalid characters. Only letters, spaces, commas, dots, and dashes are allowed.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            Address.requestFocus();
            return;
        }

        String phoneInput = PhoneNum.getText().trim();
        if (!phoneInput.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Phone number must contain only numeric digits.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            PhoneNum.requestFocus();
            return;
        }

        String ageInput = Age.getText().trim();
        if (!ageInput.matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Age must contain only numeric digits.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            Age.requestFocus();
            return;
        }

        String genderInput = Gend.getText().trim().toUpperCase();
        if (!genderInput.equals("F") && !genderInput.equals("M")) {
            JOptionPane.showMessageDialog(null, "Gender must be either 'F' or 'M'.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            Gend.requestFocus();
            return;
        }

        String selectedCourse = courseComboBox.getSelectedItem().toString();
        if (selectedCourse.equals("Select:")) {
            JOptionPane.showMessageDialog(null, "Please select a valid course.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            courseComboBox.requestFocus();
            return;
        }

        String birthdayInput = Bday.getText().trim();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        dateFormat.setLenient(false);
        try {
            dateFormat.parse(birthdayInput); // Validate date format
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, "Invalid birthday format. Please use 'YYYY-MM-DD'.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            Bday.requestFocus();
            return;
        }

        // Prepare SQL insert query to insert data into the database
        String sql = "INSERT INTO isufst (StudName, Address, PhoneNum, DateTimeEnrolled, Age, Bday, Gend, Course) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

        pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS); // Ensure we can retrieve generated keys

        // Set the values for the placeholders
        pstmt.setString(1, nameInput);
        pstmt.setString(2, addressInput);
        pstmt.setString(3, phoneInput);

        java.util.Date currentDate = new java.util.Date(); // Current system date and time
        java.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(currentDate.getTime());
        pstmt.setTimestamp(4, sqlTimestamp);

        pstmt.setString(5, ageInput);
        pstmt.setString(6, birthdayInput);
        pstmt.setString(7, genderInput);
        pstmt.setString(8, selectedCourse);

        // Execute the insert query
        int rowsInserted = pstmt.executeUpdate();
        if (rowsInserted > 0) {
            // Retrieve the generated ID
            rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                int generatedId = rs.getInt(1); // The first column contains the generated ID
                ID_no.setText(String.valueOf(generatedId)); // Set the generated ID in the text field
            }

            JOptionPane.showMessageDialog(null, "Student enrolled successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Enrollment failed. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (rs != null) rs.close(); // Close the ResultSet
            DBConnection.closeConnection(conn); // Close the database connection
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error closing database connection: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Failed to establish a connection to the database.", "Error", JOptionPane.ERROR_MESSAGE);
}





    }//GEN-LAST:event_btnEnrollActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
  // Inside the action listener for the Update button
String idInput = ID_no.getText().trim();
if (idInput.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Please enter a valid student ID to update.", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Validate the other inputs
String nameInput = StudentName.getText().trim();
if (!nameInput.matches("[a-zA-Z ]+")) {
    JOptionPane.showMessageDialog(null, "Student name must contain only alphabetic characters and spaces.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    StudentName.requestFocus();
    return;
}

String addressInput = Address.getText().trim();
if (!addressInput.matches("[a-zA-Z,\\.\\-\\s]+")) {
    JOptionPane.showMessageDialog(null, "Address contains invalid characters. Only letters, spaces, commas, dots, and dashes are allowed.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    Address.requestFocus();
    return;
}

String phoneInput = PhoneNum.getText().trim();
if (!phoneInput.matches("\\d+")) {
    JOptionPane.showMessageDialog(null, "Phone number must contain only numeric digits.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    PhoneNum.requestFocus();
    return;
}

String ageInput = Age.getText().trim();
if (!ageInput.matches("\\d+")) {
    JOptionPane.showMessageDialog(null, "Age must contain only numeric digits.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    Age.requestFocus();
    return;
}

String genderInput = Gend.getText().trim().toUpperCase();
if (!genderInput.equals("F") && !genderInput.equals("M")) {
    JOptionPane.showMessageDialog(null, "Gender must be either 'F' or 'M'.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    Gend.requestFocus();
    return;
}

String selectedCourse = courseComboBox.getSelectedItem().toString();
if (selectedCourse.equals("Select:")) {
    JOptionPane.showMessageDialog(null, "Please select a valid course.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    courseComboBox.requestFocus();
    return;
}

String birthdayInput = Bday.getText().trim();
SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
dateFormat.setLenient(false);
try {
    dateFormat.parse(birthdayInput); // Validate date format
} catch (ParseException e) {
    JOptionPane.showMessageDialog(null, "Invalid birthday format. Please use 'YYYY-MM-DD'.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
    Bday.requestFocus();
    return;
}

// Perform database update
Connection conn = DBConnection.getConnection();
if (conn != null) {
    PreparedStatement pstmt = null;
    try {
        // SQL update query
        String sql = "UPDATE isufst SET StudName = ?, Address = ?, PhoneNum = ?, DateTimeEnrolled = ?, Age = ?, Bday = ?, Gend = ?, Course = ? WHERE ID_no = ?";

        pstmt = conn.prepareStatement(sql);

        // Set values for placeholders
        pstmt.setString(1, nameInput);
        pstmt.setString(2, addressInput);
        pstmt.setString(3, phoneInput);

        java.util.Date currentDate = new java.util.Date(); // Current system date and time
        java.sql.Timestamp sqlTimestamp = new java.sql.Timestamp(currentDate.getTime());
        pstmt.setTimestamp(4, sqlTimestamp);

        pstmt.setString(5, ageInput);
        pstmt.setString(6, birthdayInput);
        pstmt.setString(7, genderInput);
        pstmt.setString(8, selectedCourse);
        pstmt.setInt(9, Integer.parseInt(idInput)); // Ensure the ID_no is correctly parsed and used

        // Execute update
        int rowsUpdated = pstmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(null, "Record updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No record found with the given ID.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        System.out.println("SQL Error: " + e.getMessage());
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            DBConnection.closeConnection(conn);
        } catch (SQLException e) {
            System.out.println("Error closing resources: " + e.getMessage());
            e.printStackTrace();
        }
    }
} else {
    JOptionPane.showMessageDialog(null, "Failed to establish a connection to the database.", "Error", JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_updateActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
       // Ensure an ID_no is provided for the record to be deleted
    String idInput = ID_no.getText();
    if (idInput.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please select a record to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Stop further execution
    }

    // Confirm the deletion
    int confirmation = JOptionPane.showConfirmDialog(null, 
        "Are you sure you want to delete the record with ID " + idInput + "?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
    
    // If the user clicked YES
    if (confirmation == JOptionPane.YES_OPTION) {
        Connection conn = DBConnection.getConnection();
        if (conn != null) {
            PreparedStatement pstmt = null;
            try {
                // SQL delete query
                String sql = "DELETE FROM isufst WHERE ID_no = ?";
                pstmt = conn.prepareStatement(sql);
                
                // Set the ID_no to identify the record to delete
                pstmt.setInt(1, Integer.parseInt(idInput));
                
                // Execute the delete query
                int rowsDeleted = pstmt.executeUpdate();
                
                if (rowsDeleted > 0) {
                    JOptionPane.showMessageDialog(null, "Record deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    // Clear the fields after deletion
                    clearFields(); // Clear all form fields
                } else {
                    JOptionPane.showMessageDialog(null, "No record found with the given ID.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException e) {
                System.out.println("SQL Error: " + e.getMessage());
                e.printStackTrace();
            } finally {
                try {
                    if (pstmt != null) pstmt.close();
                    DBConnection.closeConnection(conn);
                } catch (SQLException e) {
                    System.out.println("Error closing resources: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Failed to establish a connection to the database.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_delActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       // Inside the action listener for the Search button
searchButton.addActionListener(e -> {
    String idInput = ID_no.getText().trim(); // Get the ID_no from the textfield
    if (idInput.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a valid student ID to search.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Perform the search in the database using the ID_no
    Connection conn = DBConnection.getConnection();
    if (conn != null) {
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            // SQL query to search for student by ID_no
            String sql = "SELECT * FROM isufst WHERE ID_no = ?";
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(idInput)); // Set the ID_no in the query

            rs = pstmt.executeQuery();
            if (rs.next()) {
                // Populate the text fields with the data from the database
                StudentName.setText(rs.getString("StudName"));
                Address.setText(rs.getString("Address"));
                PhoneNum.setText(rs.getString("PhoneNum"));
                Age.setText(rs.getString("Age"));
                Bday.setText(rs.getString("Bday"));
                Gend.setText(rs.getString("Gend"));
                courseComboBox.setSelectedItem(rs.getString("Course")); // Set the course dropdown value

                // Optional: you can also display the DateTimeEnrolled or other fields
                // For example, display enrollment date in a label if needed
            } else {
                JOptionPane.showMessageDialog(null, "No record found with the given ID.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error retrieving data: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                DBConnection.closeConnection(conn);
            } catch (SQLException ex) {
                System.out.println("Error closing resources: " + ex.getMessage());
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Failed to establish a connection to the database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
});

    }//GEN-LAST:event_searchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentInformationSystem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentInformationSystem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Address;
    private javax.swing.JTextField Age;
    private javax.swing.JTextField Bday;
    private javax.swing.JTextField Gend;
    private javax.swing.JTextField ID_no;
    private javax.swing.JTextField PhoneNum;
    private javax.swing.JTextField StudentName;
    private javax.swing.JButton btnEnroll;
    private javax.swing.JComboBox<String> courseComboBox;
    private javax.swing.JButton del;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
